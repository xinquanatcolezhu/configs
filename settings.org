* Notes
Your =init.el= file should look like this combined with this file =settings.org=

mark-whole-buffer =C-x h=

#+BEGIN_SRC
  (package-initialize)
  (require 'org)
  (org-babel-load-file
  (expand-file-name "settings.org"
                   user-emacs-directory))
#+END_SRC

=C-h f= tells you the elisp function or macro do e.g. =C-h f eval-when-compile=

Use below lisp function to turn on debugging
(setq debug-on-error t)

* Sane defaults
=setq= takes effect in the local buffer while setq-default affects all buffers.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Xinquan Zhu")
  (setq auto-revert-interval 1            ; Refresh buffers fast
        echo-keystrokes 0.1               ; Show keystrokes asap
        inhibit-startup-message t         ; No splash screen please
        initial-scratch-message nil       ; Clean scratch buffer
        recentf-max-saved-items 100       ; Show more recent files
        ring-bell-function 'ignore        ; Quiet
        scroll-step 1 ; Line-by-Line Scrolling
        sentence-end-double-space nil    ; No double space
        auto-save-default nil ;disable auto save
        column-number-mode t ;enable column number display
        backup-inhibited t ;disable backup
        select-enable-clipboard t
        doc-view-continuous t
        package-enable-at-startup nil
        ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally
        tramp-default-method "ssh"  ;;TRAMP mode
        default-major-mode 'text-mode
        save-interprogram-paste-before-kill t
        use-dialog-box nil
        auto-fill-mode 1)

  ;(setq-default indent-tabs-mode nil) ; stop adding tab
  (setq gc-cons-threshold 50000000) ; Emacs running on modern machines
  ;; Show system name and full file path in emacs frame title
  (setq frame-title-format
        (list (format "%s %%S: %%j " (system-name))
              '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
  (tool-bar-mode -1)
  (toggle-frame-maximized)
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq-default fill-column 80)
  (setq-default tab-width 4)
  (setq-default indicate-empty-lines t)
  (setq-default ispell-program-name "aspell")

  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-hook 'text-mode-hook '(lambda () (visual-line-mode t) (flyspell-mode 1)))

  ;;disable spell checker when editing logs
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))

  (show-paren-mode t); Matches parentheses and such in every mode
  (add-hook 'csv-mode-hook (lambda()
                             (standard-display-ascii ?\t "^I")
                             (csv-align-fields nil (buffer-end -1) (buffer-end +1))
                             ))
  (defalias 'perl-mode 'cperl-mode)
#+END_SRC
* My Interactive functions

Some built-in function

Delete
=M-\= Removes all spaces
=M-^= Joins current line with previous line (doesn’t matter where the point is on the line)


#+BEGIN_SRC emacs-lisp
  (defun today ()
    (interactive)
    (insert (format-time-string "%A, %B %e, %Y"))
    (newline)
    (newline))
  (define-key ctl-x-map "t" 'today)

  (defun replace-camel() (interactive) (replace-regexp "\\([A-Z]\\)" "_\\1" nil (region-beginning) (region-end))
         (downcase-region (region-beginning) (region-end)))

  ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max)))
      (fill-paragraph nil region)))

                                          ;duplicate a line
  (global-set-key (kbd "M-p") "\C-a\C- \C-n\M-w\C-y")
  (global-set-key (kbd "M-P") "\C-a\C- \C-n\M-w")

  (defun move-line-up () (interactive) (transpose-lines 1)  (previous-line 2))
  (defun move-line-down () (interactive) (next-line 1) (transpose-lines 1) (previous-line 1))

#+END_SRC

* Packages
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
               '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
  ;; Bootstrap use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (use-package diminish :ensure t)
  (diminish 'abbrev-mode "Abv")

  (use-package helm :ensure t)
  (use-package ace-window :ensure t)
  (use-package ztree :ensure t)
  (use-package undo-tree :diminish undo-tree-mode :init (global-undo-tree-mode))
  (use-package recentf  :init (setq recentf-max-saved-items 2000 recentf-max-menu-items 2000))
  (use-package flycheck :diminish flycheck-mode :ensure t
    :config
    (setq global-flycheck-mode t)
    (setq flycheck-shellcheck-follow-sources nil))

  (use-package avy :bind ("C-;" . avy-goto-char)) ;; Jump to a word starting with a given char.
  (use-package auto-save-buffers-enhanced :init (setq auto-save-buffers-enhanced-interval 2)
    (auto-save-buffers-enhanced t))
  (use-package multiple-cursors :bind ( "C->" . mc/mark-next-like-this)
    ( "C-<" . mc/mark-previous-like-this)( "C-S-c C-S-c" . mc/edit-lines))
  (use-package yasnippet :init (yas-global-mode t)
    :config (add-hook 'term-mode-hook
                      (lambda()(setq yas-dont-activate t)(setq yas-snippet-dirs '("~/emacs.d/snippets")))))

  (use-package google-translate :init (lambda()(require 'google-translate-default-ui)
                                        (custom-set-variables
                                         '(google-translate-default-source-language "en")
                                         '(google-translate-default-target-language "zh-CN")))
    :bind ("\C-ct" . google-translate-at-point))
  (use-package validate :ensure t)
  (use-package iedit-mode :init (lambda () (call-interactively 'iedit-restrict-function)) :bind ("\C-ce" . iedit-mode))
  (use-package expand-region :init (setq expand-region-fast-keys-enabled nil) (setq er--show-expansion-message t)
    :bind ( "C-=" . er/expand-region))
  (use-package winner :ensure t  :init (winner-mode 1))

#+END_SRC

* Key bindings

Some useful commands

=M-c= capitalize-word
=C-j= newline and indent
=M-z= zap-up-to-char

#+BEGIN_SRC  emacs-lisp

  (require 'misc)
  (global-set-key (kbd "M-!") 'async-shell-command)
  (global-set-key (kbd "M-&") 'shell-command)
  (global-set-key (kbd "M-[") 'move-line-up)
  (global-set-key (kbd "M-]") 'move-line-down)
  (global-set-key "\C-c\C-u" 'uncomment-region)
  (global-set-key "\C-c\C-c" 'comment-region)
  (global-set-key (kbd "\C-o") 'other-window)
  (global-set-key (kbd "\C-c <down>") 'enlarge-window)
  (global-set-key (kbd "\C-c <up>") 'shrink-window)
  (global-set-key (kbd "RET") 'newline-and-indent)
  (global-set-key (kbd "C-x f") 'find-name-dired)
  (global-set-key (kbd "M-z") 'zap-up-to-char)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x C-r") 'helm-recentf)
  (global-set-key (kbd "C-c k") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  (global-set-key (kbd "C-x b")   'helm-mini)

  (global-set-key (kbd "C-;") 'avy-goto-char)

#+END_SRC

* Helm, Theme and power line

=helm-locate= is very helpful to find files
=helm-bookmark= I should use it more often

#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
  (load-theme 'monokai)
  (use-package spaceline-config) (spaceline-emacs-theme)


  (defun xq/highlight-logs ()
    (interactive)
    (when (equal "log" (file-name-extension (buffer-file-name)))
      (hi-lock-mode 1)
      (highlight-lines-matching-regexp "error:" 'hi-red-b)
      (highlight-lines-matching-regexp "info:" 'hi-yellow-b)))
  (add-hook 'find-file-hook 'xq/highlight-logs)

#+END_SRC

* Git/Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit :init (lambda ()
                             (add-to-list 'magit-no-confirm 'stage-all-changes)
                             (add-to-list 'magit-no-confirm 'safe-with-wip)
                             (setq magit-push-always-verify nil)) :bind ( "C-x g" . magit-status)
                             :commands (magit-status magit-log-all))
#+END_SRC
* ORG Mode

Jump to the major mode for the source block in org file: =C-c ''= for command =org-edit-special=

Org tangling can be useful to export the code =:tangle=

Narrowing down a section =C-x n s= for command =org-narrow-to-subtree=

In org-babel, you can speed up shell command by running multiple source code blocks under one session.
#+BEGIN_SRC example
:PROPERTIES:
:session: session1
:results: output
:END:
#+END_SRC

Edit local file as root in =TRAMP=
=C-x C-f /su::/etc/hosts=
=C-x C-f /sudo::/etc/hosts=
Remote Access with TRAMP in an org file can be typed as a link like below
#+BEGIN_SRC
[[/1:/home/xinquan/.my.cnf]]
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (when  (require 'org-bullets nil 'noerror)
    (setq org-bullets-face-name (quote org-bullet-face))
    (add-hook 'org-mode-hook (lambda ()
                               (org-bullets-mode 1)
                               (whitespace-mode -1)
                               ))
    (setq org-src-fontify-natively t)
    (setq org-bullets-bullet-list '("✤" "◉" "***" "****" "▹" "†" "✠" "✚" "✜" "✛" "✣" "✥")))

  (eval-after-load 'org
    (lambda()
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)(java .t)
         (shell . t)(ruby . t)(C . t)(sql .t)(python .t)(http . t)
         ))
      (setq org-babel-C-compiler "clang")
      (setq org-babel-C++-compiler "clang++")
      (setq org-babel-python-command "python2")
      (setq org-export-babel-evaluate nil)
      (setq org-startup-indented t)
      ;; increase imenu depth to include third level headings
      (setq org-imenu-depth 3)
      ;; Update images from babel code blocks automatically
      (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
      (setq org-src-tab-acts-natively t)
      (setq org-confirm-babel-evaluate nil)))


#+END_SRC

* Shell and Terminal
#+BEGIN_SRC emacs-lisp
 (add-hook 'shell-mode-hook (lambda () (setq show-trailing-whitespace nil)))
 (add-hook 'term-mode-hook (lambda() (setq show-trailing-whitespace nil)))
  ;; Setup Emacs to run zsh/bash as its primary shell.
  (setq shell-file-name "bash")
  (setq shell-command-switch "-c")
  (setq explicit-shell-file-name shell-file-name)
  (setenv "SHELL" shell-file-name)
  (setq explicit-sh-args '("-login" "-i"))
  (require 'term)
  (defun term-switch-to-shell-mode ()
    (interactive)
    (if (equal major-mode 'term-mode)
        (progn
          (shell-mode)
          (set-process-filter  (get-buffer-process (current-buffer)) 'comint-output-filter )
          (local-set-key (kbd "C-j") 'term-switch-to-shell-mode)
          (compilation-shell-minor-mode 1)
          (comint-send-input)
          )
      (progn
        (compilation-shell-minor-mode -1)
        (font-lock-mode -1)
        (set-process-filter  (get-buffer-process (current-buffer)) 'term-emulate-terminal)
        (term-mode)
        (term-char-mode)
        (term-send-raw-string (kbd "C-l"))
        )))
  (define-key term-raw-map (kbd "C-j") 'term-switch-to-shell-mode)
#+END_SRC
* C++ development

Try the =moo-implement= to auto-complete the c++ functions. =moo-jump-directory= is also very helpful to navigate
the codes

`C-c TAB` will past the helm completion result

=hs-minor-mode= is quite helpful to show/hide code blocks

#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :ensure t
    :init
    (add-hook 'c-mode-hook 'helm-gtags-mode)
    (add-hook 'c++-mode-hook 'helm-gtags-mode)
    (add-hook 'ruby-mode-hook 'helm-gtags-mode)
    (add-hook 'python-mode-hook 'helm-gtags-mode)
    (add-hook 'php-mode-hook 'helm-gtags-mode)
    (add-hook 'web-mode-hook 'helm-gtags-mode)
    :commands (helm-gtags-mode helm-gtags-dwim)
    :diminish helm-gtags-mode
    :config
    (setq helm-gtags-auto-update t)
    (bind-keys :map helm-gtags-mode-map
               ( "M-t" . helm-gtags-find-tag)
               ( "M-s" . helm-gtags-show-stack)
               ( "M-." . helm-gtags-dwim)
               ( "M-r" . helm-gtags-find-rtag)
               ( "M-g M-p" . helm-gtags-parse-file)
               ( "C-c <" . helm-gtags-previous-history)
               ( "C-c >" . helm-gtags-next-history)
               ( "M-," . helm-gtags-pop-stack)))

  (add-hook 'c-mode-common-hook 'flycheck-mode)
  (add-hook 'c-mode-common-hook 'hs-minor-mode)
  (add-hook 'c-mode-common-hook 'helm-gtags-mode)

  (use-package cff)
  (add-hook 'c-mode-common-hook
            (lambda() (global-set-key  (kbd "<f8>") 'cff-find-other-file)
              (add-hook 'before-save-hook 'clang-format-buffer nil t)))

  (add-to-list 'auto-mode-alist '("\\.h$" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.ipp$" . c++-mode))

  (defun bury-compile-buffer-if-successful (buffer string)
    "Bury a compilation buffer if succeeded without warnings"
    (if (and
         (string-match "compilation" (buffer-name buffer))
         (string-match "finished" string)
         (not (with-current-buffer buffer
                (search-forward "warning" nil t))))
        (run-with-timer 1 nil (lambda (buf) (bury-buffer buf)
                                (switch-to-prev-buffer (get-buffer-window
                                                        buf) 'kill))
                        buffer)))

  (add-hook 'compilation-mode-hook
            '(lambda()
               (setq compilation-auto-jump-to-first-error t)
               (setq compilation-scroll-output t
                     compilation-window-height 15)
               (define-key compilation-mode-map (kbd "n") 'compilation-next-error)
               (define-key compilation-mode-map (kbd "p") 'compilation-previous-error)))

  (eval-after-load "cc-mode"
    '(progn
       ;;compile
       (global-set-key [f9] 'recompile)
       (setq compilation-skip-threshold 2)
       (setq compilation-ask-about-save nil)
       (setq compilation-auto-jump-to-first-error 1)
       (semantic-mode nil)
       (setq c-default-style "linux"
             c-basic-offset 4)
       (c-set-offset 'innamespace 0)

       ;;function-args
       (when  (require 'function-args nil 'noerror)
         (fa-config-default)
         (define-key c-mode-map  [(control tab)] 'moo-complete)
         (define-key c++-mode-map  [(control tab)] 'moo-complete)
         (define-key c-mode-map (kbd "M-o")  'fa-show)
         (define-key c++-mode-map (kbd "M-o")  'fa-show))

       (add-hook 'compilation-finish-functions
                 'bury-compile-buffer-if-successful)))

                                          ; Make compilation command per folder
  (make-variable-buffer-local 'compile-command)

                                          ; Modern cpp font
  (use-package modern-cpp-font-lock
    :ensure t
    :config
    (add-hook 'c++-mode-hook #'modern-c++-font-lock-mode))

  (use-package rtags
    :config
    :defer 2
    :config
    (add-hook 'c++-mode-hook
              (lambda ()

                (local-set-key (kbd "M-'") 'rtags-find-symbol-at-point)
                (local-set-key (kbd "M-@") 'rtags-find-references)
                (local-set-key (kbd "M-;") 'rtags-location-stack-back))))

    (use-package flycheck-rtags
      :ensure t
      :after flycheck rtags
      :config
      (defun my-flycheck-rtags-setup ()
        (flycheck-select-checker 'rtags)
        (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
        (setq-local flycheck-check-syntax-automatically nil))
      (add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup))

  ;; gdb
  (defadvice gdb-setup-windows (around setup-more-gdb-windows activate)
    ad-do-it
    (split-window-horizontally)
    (other-window 1)
    (gdb-set-window-buffer
     (gdb-get-buffer-create 'gdb-some-buffer-type)))
  (setq gud-tooltip-mode t)

#+END_SRC

* Company and completion

#+BEGIN_SRC emacs-lisp
(use-package company :defer t :diminish company-mode
    :preface
    ;; enable yasnippet everywhere
    (defvar company-mode/enable-yas t
      "Enable yasnippet for all backends.")
    (defun company-mode/backend-with-yas (backend)
      (if (or
           (not company-mode/enable-yas)
           (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))

    :init (global-company-mode t)
    :config
    ;; no delay no autocomplete
    (validate-setq
     company-idle-delay 0.08
     company-minimum-prefix-length 2
     company-tooltip-limit 20)
    ;; remove unused backends
    (validate-setq company-backends (delete 'company-semantic company-backends))
    (validate-setq company-backends (delete 'company-capf company-backends))
    (validate-setq company-backends (delete 'company-eclim company-backends))
    (validate-setq company-backends (delete 'company-etags company-backends))
    (validate-setq company-backends (delete 'company-xcode company-backends))
    (validate-setq company-backends (delete 'company-clang company-backends))
    (validate-setq company-backends (delete 'company-bbdb company-backends))
    (validate-setq company-backends (delete 'company-oddmuse company-backends))
    '(add-to-list
      'company-backends 'company-rtags)
    (validate-setq company-backends
                   (mapcar #'company-mode/backend-with-yas company-backends)))

#+END_SRC

* Text surround and wrapping


#+BEGIN_SRC emacs-lisp
(defun surround (start end txt)
  "Wrap region with textual markers.

 Without active region (START and END), use the current 'symbol word' at point instead of TXT.
 Useful for wrapping parens and angle-brackets to also insert the matching closing symbol.

 This function also supports some `org-mode' wrappers:

  - `#s` wraps the region in a source code block
  - `#e` wraps it in an example block
  - `#q` wraps it in an quote block"
  (interactive "r\nsEnter text to surround: " start end txt)

  ;; If the region is not active, we use the 'thing-at-point' function
  ;; to get a "symbol" (often a variable or a single word in text),
  ;; and use that as our region.

  (if (not (region-active-p))
      (let ((new-region (bounds-of-thing-at-point 'symbol)))
        (setq start (car new-region))
        (setq end (cdr new-region))))

  ;; We create a table of "odd balls" where the front and the end are
  ;; not the same string.
  (let* ((s-table '(("#e" . ("#+BEGIN_EXAMPLE\n" "\n#+END_EXAMPLE") )
                    ("#s" . ("#+BEGIN_SRC \n"    "\n#+END_SRC") )
                    ("#q" . ("#+BEGIN_QUOTE\n"   "\n#+END_QUOTE"))
                    ("<"  . ("<" ">"))
                    ("("  . ("(" ")"))
                    ("{"  . ("{" "}"))
                    ("["  . ("[" "]"))))    ; Why yes, we'll add more
         (s-pair (assoc-default txt s-table)))

    ;; If txt doesn't match a table entry, then the pair will just be
    ;; the text for both the front and the back...
    (unless s-pair
      (setq s-pair (list txt txt)))

    (save-excursion
      (narrow-to-region start end)
      (goto-char (point-min))
      (insert (car s-pair))
      (goto-char (point-max))
      (insert (cadr s-pair))
      (widen))))

(global-set-key (kbd "C-+") 'surround)
#+END_SRC
* Evil/smart parens

Move forward across one balanced expression. (smartparens.el
=sp-forward-sexp= vs =forward-sexp= Move forward across one balanced expression (sexp).
C-M-f/ C-M-b

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (bind-key "C-M-f" 'sp-forward-sexp)
    (progn
      (require 'smartparens-config)
      (smartparens-global-mode t)))

  (use-package evil
    :config
    (evil-mode 0)
    (dolist (mode '(ag-mode
                    flycheck-error-list-mode
                    git-rebase-mode))
      (add-to-list 'evil-emacs-state-modes mode))

; One wants to paste some previously copied; (from application other than Emacs)
    (setq evil-mode-line-format nil
          evil-visual-update-x-selection 'ignore
          evil-insert-state-cursor '(bar "White")
          evil-visual-state-cursor '(box "#F86155"))

    (evil-add-hjkl-bindings occur-mode-map 'emacs
      (kbd "/")       'evil-search-forward
      (kbd "n")       'evil-search-next
      (kbd "N")       'evil-search-previous
      (kbd "C-d")     'evil-scroll-down
      (kbd "C-u")     'evil-scroll-up
      (kbd "C-w C-w") 'other-window))
     ;;;

  ;; chome amotic editing
  (use-package atomic-chrome
    :ensure t
    :config (setq atomic-chrome-buffer-open-style 'window))

     ;;; Weather
  (use-package wttrin
    :ensure t
    :commands (wttrin)
    :init
    (setq wttrin-default-cities '("Tokyo"
                                  "Shanghai")))

#+END_SRC

* Javascript, Ruby & Python

#+BEGIN_SRC emacs-lisp
  (use-package elpy  :defer t
    :commands (elpy-nable)
    :init
    (add-hook 'python-mode-hook #'elpy-enable)
    :config
    (progn
      (setq elpy-rpc-python-command "python3")
      (setq python-shell-interpreter "python3")
      (setq python-shell-interpreter-args "-i")))

  (eval-after-load "python-mode"
    '(progn
       (linum-mode 1)
       (define-key python-mode-map (kbd "M-.") 'elpy-goto-definition)
       (define-key python-mode-map (kbd "M-,") 'pop-tag-mark)
       (define-key python-mode-map (kbd "M-'") 'python-nav-forward-sexp)))

  (use-package js2-mode
    :mode ("\\.js\\'". js2-mode)
    :init
    (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
    )
  (when  (require 'yasnippet nil 'noerror)
    (add-hook 'web-mode-hook 'yas-minor-mode))

  ; Ruby
  (use-package rubocopfmt :ensure t)
  (use-package inf-ruby :ensure t)

  (add-hook 'ruby-mode-hook #'aggressive-indent-mode)
  (eval-after-load "ruby-mode"
    '(progn
       (define-key ruby-mode-map (kbd "M-'") 'sp-ruby-forward-sexp)))
  (setq ruby-insert-encoding-magic-comment nil)

  ;; autoinsert
  (eval-after-load 'autoinsert
    '(define-auto-insert '("\\.cpp\\'" . "C skeleton")
       '(
         "Short description: "
         "/**\n * "
         (file-name-nondirectory (buffer-file-name))
         " -- " str \n
         "*" \n
         "* Written on " (format-time-string "%A, %e %B %Y.") \n
         "* By Xinquan Zhu" \n
         "*/" > \n \n
         > _ \n
         > \n)))

  '(auto-insert-mode t)

  ;;rust mode
  (with-eval-after-load 'rust-mode
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

#+END_SRC

* File extension and mode mapping and hooks

Certain mode should enable line number mode and whitespace mode
=(flyspell-prog-mode)= check spellings in your comments of your program

#+BEGIN_SRC emacs-lisp
   (add-hook 'c-mode-common-hook (lambda () (linum-mode 1)))
   (add-hook 'ruby-mode-hook (lambda () (linum-mode 1) (flyspell-prog-mode)))

   (add-to-list 'auto-mode-alist '("\\.ctp$" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.srt$" . text-mode))


#+END_SRC
* Whitespace Mode
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :bind ("C-c T w" . whitespace-mode)
    :init
    (setq whitespace-line-column nil
          whitespace-display-mappings '((space-mark 32 [183] [46])
                                        (newline-mark 10 [9166 10])
                                        (tab-mark 9 [187 9] [92 9])))
    :config
    (set-face-attribute 'whitespace-space       nil :foreground "#666666" :background nil)
    (set-face-attribute 'whitespace-newline     nil :foreground "#666666" :background nil)
    (set-face-attribute 'whitespace-indentation nil :foreground "#666666" :background nil)
    (set-face-attribute 'whitespace-trailing    nil :foreground "DeepPink" :background nil)
    (set-face-attribute 'whitespace-tab         nil :foreground "#8cb3f2" :background nil :underline t)
    :diminish whitespace-mode)

#+END_SRC
* Mac OSX / Linux and environment PATH

The variable =exec-path= is the equivalent of the PATH environment variable for Emacs.

#+BEGIN_SRC emacs-lisp

  (defvar system-type-as-string (prin1-to-string system-type))
  (defvar on_windows_nt (string-match "windows-nt" system-type-as-string))
  (defvar on_darwin     (string-match "darwin" system-type-as-string))
  (defvar on_linux  (string-match "linux" system-type-as-string))
  (defvar on_cygwin     (string-match "cygwin" system-type-as-string))
  (defvar on_solaris    (string-match "usg-unix-v" system-type-as-string))

  (if on_darwin
      (set-face-attribute 'default nil :family "SF Mono" :height 160 :weight 'normal))

  (if on_linux
      (setq visible-bell 1)
    (use-package cmake-ide
      :after rtags
      :defer 2
      :config
      (cmake-ide-setup)
      (bind-keys :map helm-gtags-mode-map
                 ( "f10" . cmake-ide-compile))
      :init
      ;; use .dir-locals.el to define a directory local variable and set cmake-ide-build-dir there
      (setq cmake-ide-cmake-opts "-G Ninja -DCMAKE_BUILD_TYPE=Debug"))

  )

  (setq exec-path (append exec-path '("/usr/local/bin")))
  ; add python bin
  (setq exec-path (append exec-path '((concat (getenv "HOME") "/.local/bin/"))))

  (define-coding-system-alias 'UTF-8 'utf-8)

  (use-package docker
    :ensure t
    :bind ("C-c d" . docker))

#+END_SRC
